"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6438],{8570:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(79);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),d=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(r),f=n,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||o;return r?a.createElement(m,s(s({ref:t},c),{},{components:r})):a.createElement(m,s({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var d=2;d<o;d++)s[d]=r[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},563:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=r(7626),n=(r(79),r(8570));const o={sidebar_position:9},s="Server Persistent Storage",i={unversionedId:"sync/storage",id:"sync/storage",title:"Server Persistent Storage",description:"Verdant only supports SQLite-backed server storage at the moment, but in two flavors:",source:"@site/docs/sync/storage.md",sourceDirName:"sync",slug:"/sync/storage",permalink:"/docs/sync/storage",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Pruning Invalid Data",permalink:"/docs/sync/pruning"},next:{title:"Access Control",permalink:"/docs/sync/access"}},l={},d=[{value:"Tradeoffs",id:"tradeoffs",level:2}],c={toc:d};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"server-persistent-storage"},"Server Persistent Storage"),(0,n.kt)("p",null,"Verdant only supports SQLite-backed server storage at the moment, but in two flavors:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Unified: writes to a single database file. Stable and well-tested, but doesn't scale to many libraries at once."),(0,n.kt)("li",{parentName:"ul"},"Sharded: writes one database file per library. Still experimental and being vetted as of writing. Should scale better to large apps.")),(0,n.kt)("p",null,"You import the type of storage you want from ",(0,n.kt)("inlineCode",{parentName:"p"},"@verdant-web/server/storage")," and pass it to the ",(0,n.kt)("inlineCode",{parentName:"p"},"storage")," parameter of the ",(0,n.kt)("inlineCode",{parentName:"p"},"Server")," constructor options."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { Server } from '@verdant-web/server';\nimport { sqlStorage, sqlShardStorage } from '@verdant-web/server/storage';\n\nconst serverUnified = new Server({\n    // ...\n    storage: sqlStorage({ databaseFile: 'verdant.sqlite' }),\n});\n\nconst serverSharded = new Server({\n    // ...\n    storage: sqlShardStorage({\n        databasesDirectory: 'verdant-databases',\n        // you can transfer from a previous unified database...\n        transferFromUnifiedDatabaseFile: 'verdant.sqlite',\n    }),\n});\n")),(0,n.kt)("p",null,"Sharded storage supports automatic transfer from a prior unified database on startup, but it's not guaranteed to be fast. It should only happen once, though."),(0,n.kt)("p",null,"In addition, both storage types support the ",(0,n.kt)("inlineCode",{parentName:"p"},"disableWal")," option, which switches off the WAL in SQLite. I don't think you'd want to do that, but, it's there. Remember Verdant makes frequent writes during high traffic periods."),(0,n.kt)("h2",{id:"tradeoffs"},"Tradeoffs"),(0,n.kt)("p",null,"Most likely, once sharded storage is proven stable, you'll want to use that."),(0,n.kt)("p",null,"There are drawbacks to database-per-tenant models, but most of them don't apply to Verdant:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Migration of database schema requires more coordination: Verdant will handle these for you and they are not likely to happen very often, if at all."),(0,n.kt)("li",{parentName:"ul"},"Having to coordinate which database to query: again, Verdant handles this just fine for you."),(0,n.kt)("li",{parentName:"ul"},"Hard to aggregate query across multiple databases: there's no reason to do this with the kind of data Verdant stores."),(0,n.kt)("li",{parentName:"ul"},"Backups require copying all files: this one's kinda applicable, but backups are also a lot less critical in local-first, since the server can restore from client replicas.")),(0,n.kt)("p",null,"There's one more tradeoff, which is cold start time for initial sync on a library. When a new replica for a library sends a message to the server, it will open the sharded database for that library if it's not already loaded. This can take up to a couple hundred milliseconds in my testing. I do not believe it should take longer for larger databases, but I'm still getting an idea of it."),(0,n.kt)("p",null,"Either way, database connections are kept alive for a while after cold start (default: 1 hour). So this is a one-time initial sync cost."))}p.isMDXComponent=!0}}]);